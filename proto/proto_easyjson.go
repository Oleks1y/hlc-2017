// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package proto

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson22b38c74DecodeGithubComAlexShchTravelsProto(in *jlexer.Lexer, out *Visit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.AddError(nullValueError)
			return
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "location":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Location).UnmarshalJSON(data))
			}
		case "user":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.User).UnmarshalJSON(data))
			}
		case "visited_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.VisitedAt).UnmarshalJSON(data))
			}
		case "mark":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Mark).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Visit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b38c74DecodeGithubComAlexShchTravelsProto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Visit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b38c74DecodeGithubComAlexShchTravelsProto(l, v)
}

func easyjson22b38c74DecodeGithubComAlexShchTravelsProto3(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.AddError(nullValueError)
			return
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "email":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Email).UnmarshalJSON(data))
			}
		case "first_name":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FirstName).UnmarshalJSON(data))
			}
		case "last_name":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastName).UnmarshalJSON(data))
			}
		case "gender":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Gender).UnmarshalJSON(data))
			}
		case "birth_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BirthDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b38c74DecodeGithubComAlexShchTravelsProto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b38c74DecodeGithubComAlexShchTravelsProto3(l, v)
}

func easyjson22b38c74DecodeGithubComAlexShchTravelsProto5(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.AddError(nullValueError)
			return
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "place":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Place).UnmarshalJSON(data))
			}
		case "country":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Country).UnmarshalJSON(data))
			}
		case "city":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.City).UnmarshalJSON(data))
			}
		case "distance":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Distance).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Location) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b38c74DecodeGithubComAlexShchTravelsProto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b38c74DecodeGithubComAlexShchTravelsProto5(l, v)
}
